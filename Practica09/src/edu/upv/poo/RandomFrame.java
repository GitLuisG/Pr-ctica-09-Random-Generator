package edu.upv.poo;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;
import java.security.SecureRandom;
import java.util.concurrent.*;
import javax.swing.*;

public class RandomFrame extends JFrame {

    /**
     * Creates new form RandomFrame
     */
    public RandomFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtNumerosGenerados = new javax.swing.JTextArea();
        txtCantNumeros = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnGenerar = new javax.swing.JButton();
        btnGenerarSW = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        btnGenerarConThreads = new javax.swing.JButton();
        btnGenerarSinMostrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtNumerosGenerados.setColumns(20);
        txtNumerosGenerados.setRows(5);
        jScrollPane1.setViewportView(txtNumerosGenerados);

        txtCantNumeros.setText("1000000");

        jLabel1.setText("Cant. Numeros:");

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarActionPerformed(evt);
            }
        });

        btnGenerarSW.setText("Generar SW");
        btnGenerarSW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarSWActionPerformed(evt);
            }
        });

        btnGenerarConThreads.setText("Generar T");
        btnGenerarConThreads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarConThreadsActionPerformed(evt);
            }
        });

        btnGenerarSinMostrar.setText("Generar Sin Mostrar");
        btnGenerarSinMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarSinMostrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCantNumeros)
                    .addComponent(btnGenerarSW, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnGenerarConThreads, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnGenerarSinMostrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCantNumeros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerarSW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerarConThreads)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGenerarSinMostrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarActionPerformed
        
        System.out.println(
                "Ejecutando en " + Thread.currentThread().getName());
        
        SecureRandom secRan = new SecureRandom();
        int cantNums = Integer.parseInt(txtCantNumeros.getText());
        float[] randoms = new float[cantNums];
        
        for (int i = 0; i < cantNums; i++) {
            randoms[i] = secRan.nextFloat();
            txtNumerosGenerados.append(
                    Float.toString(randoms[i]) + "\n");
        }
        
        
    }//GEN-LAST:event_btnGenerarActionPerformed

    private void btnGenerarSWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarSWActionPerformed
        int cantNumeros = Integer.parseInt(txtCantNumeros.getText());
        txtNumerosGenerados.setText("");
        progressBar.setValue(0);
        btnGenerar.setEnabled(false);
        btnGenerarSW.setEnabled(false);
        generadorRandomsSW = new GeneradorRandomsSW(
                cantNumeros, txtNumerosGenerados);
        generadorRandomsSW.addPropertyChangeListener(
                this::propertyChanged);
        System.out.println("Antes del execute en thread " +
                Thread.currentThread().getName());
        generadorRandomsSW.execute();  // <-----
        System.out.println("Despues del execute...");
    }//GEN-LAST:event_btnGenerarSWActionPerformed

    private void btnGenerarConThreadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarConThreadsActionPerformed
        int cantNumeros = Integer.parseInt(txtCantNumeros.getText());
        txtNumerosGenerados.setText("");
        progressBar.setValue(0);
        btnGenerar.setEnabled(false);
        btnGenerarSW.setEnabled(false);
        btnGenerarConThreads.setEnabled(false);
        generadorRandoms = new GeneradorRandoms(cantNumeros);
        generadorRandoms.addPropertyChangeListener(
                this::propertyChanged);
        executor.execute(generadorRandoms);
    }//GEN-LAST:event_btnGenerarConThreadsActionPerformed

    private void btnGenerarSinMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarSinMostrarActionPerformed
        int cantExecs = 12;
        Runnable[] runs = new Runnable[cantExecs];
        for (int i = 0; i < cantExecs; i++) {
            System.out.printf("Generando task %d\n", i);
            runs[i] = () -> generarSinMostrar();
            System.out.println("type -> " + runs[i].getClass().getCanonicalName());
            executor.execute(runs[i]);
            System.out.printf("Mandado al executor task %d\n", i);
        }
    }//GEN-LAST:event_btnGenerarSinMostrarActionPerformed

    private void generarSinMostrar() {
        String tName = Thread.currentThread().getName();
        System.out.println("Ejecutando en " + tName);
        int cantNumeros = Integer.parseInt(txtCantNumeros.getText());
        SecureRandom sr = new SecureRandom();
        float[] rands = new float[cantNumeros];
        for (int i = 0; i < cantNumeros; i++) {
            rands[i] = sr.nextFloat();
        }
        System.out.println("PROCESO TERMINADO DE " + tName);
    }
    
    private void propertyChanged(PropertyChangeEvent e) {
        System.out.println(
                "property Changed: " + e.getPropertyName());
        System.out.println("  new val: " + e.getNewValue());
        if (e.getPropertyName().equals("progress")) {
            int progress = (Integer)e.getNewValue();
            progressBar.setValue(progress);
        }
        if (e.getPropertyName().equals("state") &&
                e.getNewValue().toString().equals("DONE")) {
            System.out.println("PROCESO TERMINADO");
            btnGenerar.setEnabled(true);
            btnGenerarSW.setEnabled(true);
            btnGenerarConThreads.setEnabled(true);
            try {
                float[] resultados = generadorRandomsSW.get();
                for (float i : resultados) {
                    System.out.println(i);
                }
            }
            catch (Exception ex) {
                System.out.println("ERROR: " + ex.getMessage());
            }            
        }
        if (e.getPropertyName().equals("enEjecucion") &&
                !(Boolean)e.getNewValue()) {
            System.out.println("PROCESO TERMINADO");
            float[] randoms = generadorRandoms.getRandoms();
            System.out.println("obenidos: " + randoms.length);
            btnGenerar.setEnabled(true);
            btnGenerarSW.setEnabled(true);
            btnGenerarConThreads.setEnabled(true);
        }
    }
    
    private GeneradorRandomsSW generadorRandomsSW; 
    private GeneradorRandoms generadorRandoms;
    private Executor executor = Executors.newFixedThreadPool(32);
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnGenerarConThreads;
    private javax.swing.JButton btnGenerarSW;
    private javax.swing.JButton btnGenerarSinMostrar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField txtCantNumeros;
    private javax.swing.JTextArea txtNumerosGenerados;
    // End of variables declaration//GEN-END:variables


    public class GeneradorRandoms implements Runnable {
        
        public GeneradorRandoms(int cantNumeros) {
            this.cantNumeros = cantNumeros;            
        }
        
        public int getProgress() { return progress; }
        
        public boolean getEnEjecucion() { return enEjecucion; }
        
        public float[] getRandoms() { return randoms; }
        
        public void addPropertyChangeListener(
                PropertyChangeListener l) {
            pcs.addPropertyChangeListener(l);
        }      
        
        @Override
        public void run() {
            setProgress(0);
            setEnEjecucion(true);
            String threadName = Thread.currentThread().getName();
            System.out.println("Generando randoms en" + threadName);
            SecureRandom sr = new SecureRandom();
            float[] rands = new float[cantNumeros];
            for (int i = 0; i < cantNumeros; i++) {
                rands[i] = sr.nextFloat();
                txtNumerosGenerados.append("" + rands[i] + "\n");
                setProgress(100 * (i + 1) / cantNumeros);
            }
            randoms = rands;
            setEnEjecucion(false);
        }
        
        private void setProgress(int progress) {
            int oldVal = this.progress;
            this.progress = progress;
            if (oldVal == progress) return;
            pcs.firePropertyChange("progress", oldVal, progress);
        }
        
        private void setEnEjecucion(boolean enEjecucion) {
            boolean oldVal = this.enEjecucion;
            this.enEjecucion = enEjecucion;
            if (oldVal == enEjecucion) return;
            pcs.firePropertyChange("enEjecucion", oldVal, enEjecucion);
        }
        
        private int cantNumeros;
        private int progress;
        private boolean enEjecucion = false;
        private float[] randoms;
        private final PropertyChangeSupport pcs =
                new PropertyChangeSupport(this);
    }

}  // end class RandomsFrame
